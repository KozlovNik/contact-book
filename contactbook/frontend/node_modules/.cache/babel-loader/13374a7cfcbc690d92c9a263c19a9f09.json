{"ast":null,"code":"import { LOGIN_FAILURE, LOGIN_SUCCESS, LOGIN_FETCH, REGISTER_FAILURE, REGISTER_SUCCESS, REGISTER_FETCH, USER_LOADING, USER_LOADED, USER_FAILURE } from '../redux/action-types';\nconst link = 'http://127.0.0.1:8000/api/accounts/';\nexport const getUser = () => (dispatch, getState) => {\n  dispatch({\n    type: USER_LOADING\n  });\n  const token = getState().auth.token;\n\n  if (!token) {\n    return dispatch({\n      type: USER_FAILURE\n    });\n  }\n\n  fetch(`${link}user/`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Token ${token}`\n    }\n  }).then(res => {\n    console.log(res);\n    return res.json().then(data => {\n      if (res.ok) {\n        dispatch({\n          type: USER_LOADED,\n          payload: data\n        });\n      } else {\n        dispatch({\n          type: USER_FAILURE,\n          payload: data\n        });\n      }\n    });\n  }).then(data => {\n    console.log(data);\n  });\n};\nexport const loginUser = data => dispatch => {\n  dispatch({\n    type: LOGIN_FETCH\n  });\n  fetch(`${link}login/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(res => {\n    return res.json().then(data => {\n      if (res.ok) {\n        dispatch({\n          type: LOGIN_SUCCESS,\n          payload: data\n        });\n      } else {\n        dispatch({\n          type: LOGIN_FAILURE,\n          payload: data\n        });\n      }\n    });\n  }).then(data => {\n    console.log(data);\n  });\n};\nexport const register = data => dispatch => {\n  dispatch({\n    type: REGISTER_FETCH\n  });\n  fetch(`${link}register/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(res => {\n    return res.json().then(data => {\n      if (res.ok) {\n        dispatch({\n          type: REGISTER_SUCCESS,\n          payload: data\n        });\n      }\n    });\n  }).then(data => {\n    console.log(data);\n  });\n};","map":{"version":3,"sources":["C:/Users/zcczz/Desktop/contact book/contactbook/frontend/src/redux/actions.js"],"names":["LOGIN_FAILURE","LOGIN_SUCCESS","LOGIN_FETCH","REGISTER_FAILURE","REGISTER_SUCCESS","REGISTER_FETCH","USER_LOADING","USER_LOADED","USER_FAILURE","link","getUser","dispatch","getState","type","token","auth","fetch","method","headers","then","res","console","log","json","data","ok","payload","loginUser","body","JSON","stringify","register"],"mappings":"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","sourcesContent":["import {\r\n    LOGIN_FAILURE,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FETCH,\r\n    REGISTER_FAILURE,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FETCH,\r\n    USER_LOADING,\r\n    USER_LOADED,\r\n    USER_FAILURE\r\n} from '../redux/action-types';\r\nconst link = 'http://127.0.0.1:8000/api/accounts/';\r\n\r\nexport const getUser = () => (dispatch, getState) => {\r\n    dispatch({\r\n        type: USER_LOADING\r\n    })\r\n\r\n    const token = getState().auth.token;\r\n\r\n    if (!token) {\r\n        return dispatch({\r\n            type: USER_FAILURE\r\n        })\r\n    }\r\n    fetch(`${link}user/`, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Token ${token}`,\r\n        }\r\n    })\r\n        .then(res => {\r\n            console.log(res)\r\n            return res.json()\r\n                .then((data) => {\r\n                    if (res.ok) {\r\n                        dispatch({\r\n                            type: USER_LOADED,\r\n                            payload: data\r\n                        })\r\n                    } else {\r\n                        dispatch({\r\n                            type: USER_FAILURE,\r\n                            payload: data\r\n                        })\r\n                    }\r\n                })\r\n        })\r\n        .then(data => { console.log(data) })\r\n}\r\n\r\nexport const loginUser = (data) => dispatch => {\r\n    dispatch({\r\n        type: LOGIN_FETCH\r\n    })\r\n    fetch(`${link}login/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(res => {\r\n            return res.json()\r\n                .then((data) => {\r\n                    if (res.ok) {\r\n                        dispatch({\r\n                            type: LOGIN_SUCCESS,\r\n                            payload: data\r\n                        })\r\n                    } else {\r\n                        dispatch({\r\n                            type: LOGIN_FAILURE,\r\n                            payload: data\r\n                        })\r\n                    }\r\n                })\r\n        })\r\n        .then(data => { console.log(data) })\r\n}\r\n\r\n\r\nexport const register = (data) => dispatch => {\r\n    dispatch({\r\n        type: REGISTER_FETCH\r\n    })\r\n    fetch(`${link}register/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then((res) => {\r\n            return res.json()\r\n                .then((data) => {\r\n                    if (res.ok) {\r\n                        dispatch({\r\n                            type: REGISTER_SUCCESS,\r\n                            payload: data\r\n                        })\r\n                    }\r\n                })\r\n        })\r\n        .then(data => { console.log(data) })\r\n}"]},"metadata":{},"sourceType":"module"}