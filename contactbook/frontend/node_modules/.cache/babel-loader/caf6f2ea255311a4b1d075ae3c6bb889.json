{"ast":null,"code":"import { LOGIN_FAILURE, LOGIN_SUCCESS, LOGIN_FETCH, REGISTER_FAILURE, REGISTER_SUCCESS, REGISTER_FETCH, GET_USER_LOADING, GET_USER_LOADED, GET_USER_FAILURE, LOGOUT_SUCCESS, LOGOUT_FAILURE } from '../redux/action-types';\nconst link = 'http://127.0.0.1:8000/api/accounts/';\nexport const getUser = () => (dispatch, getState) => {\n  dispatch({\n    type: GET_USER_LOADING\n  });\n  const token = getState().auth.token;\n\n  if (!token) {\n    return dispatch({\n      type: GET_USER_FAILURE\n    });\n  }\n\n  fetch(`${link}user/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Token ${token}`\n    }\n  }).then(res => {\n    return res.json().then(data => {\n      if (res.ok) {\n        dispatch({\n          type: GET_USER_LOADED,\n          payload: data\n        });\n      } else {\n        dispatch({\n          type: GET_USER_FAILURE,\n          payload: data\n        });\n      }\n    });\n  }).then(data => {\n    console.log(data);\n  });\n};\n\nasync function postRequest(url = '', data = {}) {\n  const res = await fetch(`${link}login/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  console.log(res);\n}\n\nexport const loginUser = data => dispatch => {}; // export const loginUser = data => dispatch => {\n//     dispatch({ type: LOGIN_FETCH })\n//     fetch(`${link}login/`, {\n//         method: 'POST',\n//         headers: {\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify(data)\n//     })\n//         .then(async res => {\n//             const data = await res.json()\n//             console.log(data)\n//             //     .then(data => {\n//             //         if (res.ok) {\n//             //             localStorage.setItem('token', data.token)\n//             //             dispatch({\n//             //                 type: LOGIN_SUCCESS,\n//             //                 payload: data\n//             //             })\n//             //         } else {\n//             //             // console.log(data)\n//             //             dispatch({\n//             //                 type: LOGIN_FAILURE,\n//             //                 payload: data\n//             //             })\n//             //         }\n//             //     })\n//             // )\n//             // .then(data => { console.log(data) })\n//         })\n// }\n\nexport const register = data => dispatch => {\n  dispatch({\n    type: REGISTER_FETCH\n  });\n  fetch(`${link}register/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(res => {\n    return res.json().then(data => {\n      if (res.ok) {\n        dispatch({\n          type: REGISTER_SUCCESS,\n          payload: data\n        });\n      }\n    });\n  }).then(data => {\n    console.log(data);\n  });\n};\nexport const logout = () => (dispatch, getState) => {\n  const token = localStorage.getItem('token');\n  fetch(`${link}logout/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `token ${token}`\n    }\n  }).then(res => {\n    console.log(res);\n\n    if (res.ok) {\n      dispatch({\n        type: LOGOUT_SUCCESS\n      });\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/zcczz/Desktop/contact book/contactbook/frontend/src/redux/actions.js"],"names":["LOGIN_FAILURE","LOGIN_SUCCESS","LOGIN_FETCH","REGISTER_FAILURE","REGISTER_SUCCESS","REGISTER_FETCH","GET_USER_LOADING","GET_USER_LOADED","GET_USER_FAILURE","LOGOUT_SUCCESS","LOGOUT_FAILURE","link","getUser","dispatch","getState","type","token","auth","fetch","method","headers","then","res","json","data","ok","payload","console","log","postRequest","url","body","JSON","stringify","loginUser","register","logout","localStorage","getItem"],"mappings":"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","sourcesContent":["import {\r\n    LOGIN_FAILURE,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FETCH,\r\n    REGISTER_FAILURE,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FETCH,\r\n    GET_USER_LOADING,\r\n    GET_USER_LOADED,\r\n    GET_USER_FAILURE,\r\n    LOGOUT_SUCCESS,\r\n    LOGOUT_FAILURE\r\n} from '../redux/action-types';\r\n\r\n\r\nconst link = 'http://127.0.0.1:8000/api/accounts/';\r\n\r\nexport const getUser = () => (dispatch, getState) => {\r\n    dispatch({\r\n        type: GET_USER_LOADING\r\n    })\r\n\r\n    const token = getState().auth.token\r\n\r\n    if (!token) {\r\n        return dispatch({\r\n            type: GET_USER_FAILURE\r\n        })\r\n    }\r\n    fetch(`${link}user/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Token ${token}`,\r\n        }\r\n    })\r\n        .then(res => {\r\n            return res.json()\r\n                .then((data) => {\r\n                    if (res.ok) {\r\n                        dispatch({\r\n                            type: GET_USER_LOADED,\r\n                            payload: data\r\n                        })\r\n                    } else {\r\n                        dispatch({\r\n                            type: GET_USER_FAILURE,\r\n                            payload: data\r\n                        })\r\n                    }\r\n                })\r\n        })\r\n        .then(data => { console.log(data) })\r\n}\r\n\r\nasync function postRequest(url = '', data = {}) {\r\n    const res = await fetch(`${link}login/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n\r\n    console.log(res)\r\n}\r\n\r\nexport const loginUser = data => dispatch => {\r\n\r\n}\r\n\r\n// export const loginUser = data => dispatch => {\r\n//     dispatch({ type: LOGIN_FETCH })\r\n//     fetch(`${link}login/`, {\r\n//         method: 'POST',\r\n//         headers: {\r\n//             'Content-Type': 'application/json'\r\n//         },\r\n//         body: JSON.stringify(data)\r\n//     })\r\n//         .then(async res => {\r\n//             const data = await res.json()\r\n//             console.log(data)\r\n//             //     .then(data => {\r\n//             //         if (res.ok) {\r\n//             //             localStorage.setItem('token', data.token)\r\n//             //             dispatch({\r\n//             //                 type: LOGIN_SUCCESS,\r\n//             //                 payload: data\r\n//             //             })\r\n\r\n//             //         } else {\r\n//             //             // console.log(data)\r\n//             //             dispatch({\r\n//             //                 type: LOGIN_FAILURE,\r\n//             //                 payload: data\r\n//             //             })\r\n//             //         }\r\n//             //     })\r\n//             // )\r\n//             // .then(data => { console.log(data) })\r\n//         })\r\n// }\r\n\r\n\r\nexport const register = (data) => dispatch => {\r\n    dispatch({\r\n        type: REGISTER_FETCH\r\n    })\r\n    fetch(`${link}register/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then((res) => {\r\n            return res.json()\r\n                .then((data) => {\r\n                    if (res.ok) {\r\n                        dispatch({\r\n                            type: REGISTER_SUCCESS,\r\n                            payload: data\r\n                        })\r\n                    }\r\n                })\r\n        })\r\n        .then(data => { console.log(data) })\r\n}\r\n\r\nexport const logout = () => (dispatch, getState) => {\r\n    const token = localStorage.getItem('token')\r\n    fetch(`${link}logout/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `token ${token}`\r\n        },\r\n    })\r\n        .then((res) => {\r\n            console.log(res)\r\n            if (res.ok) {\r\n                dispatch({\r\n                    type: LOGOUT_SUCCESS\r\n                })\r\n            }\r\n        })\r\n}"]},"metadata":{},"sourceType":"module"}