{"ast":null,"code":"import { LOGIN_FAILURE, LOGIN_SUCCESS, LOGIN_FETCH, REGISTER_FAILURE, REGISTER_SUCCESS, REGISTER_FETCH, USER_LOADING, USER_LOADED } from '../redux/action-types';\nconst link = 'http://127.0.0.1:8000/api/accounts/';\nexport const getUser = data => dispatch => {\n  dispatch({\n    type: USER_LOADING\n  });\n  fetch(`${link}login/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authentication': 'Token'\n    },\n    body: JSON.stringify(data)\n  }).then(res => {\n    return res.json().then(data => {\n      if (res.ok) {\n        dispatch({\n          type: USER_LOADED,\n          payload: data\n        });\n      } else {\n        dispatch({\n          type: USER,\n          payload: data\n        });\n      }\n    });\n  }).then(data => {\n    console.log(data);\n  });\n};\nexport const loginUser = data => dispatch => {\n  dispatch({\n    type: LOGIN_FETCH\n  });\n  fetch(`${link}login/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(res => {\n    return res.json().then(data => {\n      if (res.ok) {\n        dispatch({\n          type: LOGIN_SUCCESS,\n          payload: data\n        });\n      } else {\n        dispatch({\n          type: LOGIN_FAILURE,\n          payload: data\n        });\n      }\n    });\n  }).then(data => {\n    console.log(data);\n  });\n};\nexport const register = data => dispatch => {\n  dispatch({\n    type: REGISTER_FETCH\n  });\n  fetch(`${link}register/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(res => {\n    return res.json().then(data => {\n      if (res.ok) {\n        dispatch({\n          type: REGISTER_SUCCESS,\n          payload: data\n        });\n      }\n    });\n  }).then(data => {\n    console.log(data);\n  });\n};","map":{"version":3,"sources":["C:/Users/zcczz/Desktop/contact book/contactbook/frontend/src/redux/actions.js"],"names":["LOGIN_FAILURE","LOGIN_SUCCESS","LOGIN_FETCH","REGISTER_FAILURE","REGISTER_SUCCESS","REGISTER_FETCH","USER_LOADING","USER_LOADED","link","getUser","data","dispatch","type","fetch","method","headers","body","JSON","stringify","then","res","json","ok","payload","USER","console","log","loginUser","register"],"mappings":"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","sourcesContent":["import {\r\n    LOGIN_FAILURE,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FETCH,\r\n    REGISTER_FAILURE,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FETCH,\r\n    USER_LOADING,\r\n    USER_LOADED\r\n} from '../redux/action-types';\r\nconst link = 'http://127.0.0.1:8000/api/accounts/';\r\n\r\nexport const getUser = (data) => dispatch => {\r\n    dispatch({\r\n        type: USER_LOADING\r\n    })\r\n    fetch(`${link}login/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authentication': 'Token'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(res => {\r\n            return res.json()\r\n                .then((data) => {\r\n                    if (res.ok) {\r\n                        dispatch({\r\n                            type: USER_LOADED,\r\n                            payload: data\r\n                        })\r\n                    } else {\r\n                        dispatch({\r\n                            type: USER,\r\n                            payload: data\r\n                        })\r\n                    }\r\n                })\r\n        })\r\n        .then(data => { console.log(data) })\r\n}\r\n\r\nexport const loginUser = (data) => dispatch => {\r\n    dispatch({\r\n        type: LOGIN_FETCH\r\n    })\r\n    fetch(`${link}login/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(res => {\r\n            return res.json()\r\n                .then((data) => {\r\n                    if (res.ok) {\r\n                        dispatch({\r\n                            type: LOGIN_SUCCESS,\r\n                            payload: data\r\n                        })\r\n                    } else {\r\n                        dispatch({\r\n                            type: LOGIN_FAILURE,\r\n                            payload: data\r\n                        })\r\n                    }\r\n                })\r\n        })\r\n        .then(data => { console.log(data) })\r\n}\r\n\r\n\r\nexport const register = (data) => dispatch => {\r\n    dispatch({\r\n        type: REGISTER_FETCH\r\n    })\r\n    fetch(`${link}register/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then((res) => {\r\n            return res.json()\r\n                .then((data) => {\r\n                    if (res.ok) {\r\n                        dispatch({\r\n                            type: REGISTER_SUCCESS,\r\n                            payload: data\r\n                        })\r\n                    }\r\n                })\r\n        })\r\n        .then(data => { console.log(data) })\r\n}"]},"metadata":{},"sourceType":"module"}