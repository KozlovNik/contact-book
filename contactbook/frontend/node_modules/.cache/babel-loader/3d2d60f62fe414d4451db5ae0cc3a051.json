{"ast":null,"code":"import { LOGIN_FAILURE, LOGIN_SUCCESS, LOGIN_FETCH, REGISTER_FAILURE, REGISTER_SUCCESS, REGISTER_FETCH, GET_USER_LOADING, GET_USER_LOADED, GET_USER_FAILURE, LOGOUT_SUCCESS, LOGOUT_FAILURE, ADD_CONTACT_FAILURE, ADD_CONTACT_SUCCESS, ADD_CONTACT_LOADING, GET_CONTACTS_FAILURE, GET_CONTACTS_SUCCESS, GET_CONTACTS_LOADING, UPLOAD_CONTACT_ITEM, CLEAR_CONTACT_ITEM, DELETE_CONTACT_FAILURE, DELETE_CONTACT_SUCCESS, UPDATE_CONTACT_FAILURE, UPDATE_CONTACT_SUCCESS } from '../redux/action-types';\nconst link = 'http://127.0.0.1:8000/api/';\nexport const getUser = () => (dispatch, getState) => {\n  dispatch({\n    type: GET_USER_LOADING\n  });\n  const token = getState().auth.token;\n\n  if (!token) {\n    return dispatch({\n      type: GET_USER_FAILURE\n    });\n  }\n\n  fetch(`${link}accounts/user/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Token ${token}`\n    }\n  }).then(async res => {\n    const data = await res.json();\n\n    if (res.ok) {\n      dispatch({\n        type: GET_USER_LOADED,\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: GET_USER_FAILURE,\n        payload: data\n      });\n    }\n  });\n};\nexport const loginUser = data => dispatch => {\n  dispatch({\n    type: LOGIN_FETCH\n  });\n  fetch(`${link}accounts/login/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(async res => {\n    const data = await res.json();\n\n    if (res.ok) {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: LOGIN_FAILURE,\n        payload: data\n      });\n    }\n  }).catch();\n};\nexport const register = data => dispatch => {\n  dispatch({\n    type: REGISTER_FETCH\n  });\n  fetch(`${link}accounts/register/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(async res => {\n    const data = await res.json();\n\n    if (res.ok) {\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: data\n      });\n    }\n  });\n};\nexport const logout = () => dispatch => {\n  const token = localStorage.getItem('token');\n  fetch(`${link}accounts/logout/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `token ${token}`\n    }\n  }).then(res => {\n    if (res.ok) {\n      dispatch({\n        type: LOGOUT_SUCCESS\n      });\n    }\n  });\n};\nexport const getContacts = () => (dispatch, getState) => {\n  dispatch({\n    type: GET_CONTACTS_LOADING\n  });\n  const token = getState().auth.token;\n\n  if (!token) {\n    return dispatch({\n      type: GET_CONTACTS_FAILURE\n    });\n  }\n\n  fetch(`${link}contacts/`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Token ${token}`\n    }\n  }).then(async res => {\n    const data = await res.json();\n\n    if (res.ok) {\n      dispatch({\n        type: GET_CONTACTS_SUCCESS,\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: GET_USER_FAILURE,\n        payload: data\n      });\n    }\n  });\n};\nexport const addContact = data => (dispatch, getState) => {\n  dispatch({\n    type: ADD_CONTACT_LOADING\n  });\n  const token = getState().auth.token;\n\n  if (!token) {\n    return dispatch({\n      type: ADD_CONTACT_FAILURE\n    });\n  }\n\n  fetch(`${link}contacts/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Token ${token}`\n    },\n    body: JSON.stringify(data)\n  }).then(async res => {\n    const data = await res.json();\n\n    if (res.ok) {\n      dispatch({\n        type: ADD_CONTACT_SUCCESS,\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: ADD_CONTACT_FAILURE,\n        payload: data\n      });\n    }\n  });\n};\nexport const uploadContactItem = id => ({\n  type: UPLOAD_CONTACT_ITEM,\n  payload: id\n});\nexport const clearContactItem = () => ({\n  type: CLEAR_CONTACT_ITEM\n});\nexport const deleteContact = id => (dispatch, getState) => {\n  const token = getState().auth.token;\n\n  if (!token) {\n    return dispatch({\n      type: DELETE_CONTACT_FAILURE\n    });\n  }\n\n  fetch(`${link}contacts/${id}/`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Token ${token}`\n    }\n  }).then(res => {\n    if (res.ok) {\n      dispatch({\n        type: DELETE_CONTACT_SUCCESS,\n        payload: id\n      });\n    } else {\n      dispatch({\n        type: ADD_CONTACT_FAILURE\n      });\n    }\n  });\n};\nexport const updateContact = data => (dispatch, getState) => {\n  const token = getState().auth.token;\n\n  if (!token) {\n    return dispatch({\n      type: UPDATE_CONTACT_FAILURE\n    });\n  }\n\n  fetch(`${link}contacts/${data.id}/`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Token ${token}`\n    },\n    body: JSON.stringify(data)\n  }).then(async res => {\n    const data = await res.json();\n\n    if (res.ok) {\n      dispatch({\n        type: UPDATE_CONTACT_SUCCESS,\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: UPDATE_CONTACT_FAILURE,\n        payload: data\n      });\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/zcczz/Desktop/contact book/contactbook/frontend/src/redux/actions.js"],"names":["LOGIN_FAILURE","LOGIN_SUCCESS","LOGIN_FETCH","REGISTER_FAILURE","REGISTER_SUCCESS","REGISTER_FETCH","GET_USER_LOADING","GET_USER_LOADED","GET_USER_FAILURE","LOGOUT_SUCCESS","LOGOUT_FAILURE","ADD_CONTACT_FAILURE","ADD_CONTACT_SUCCESS","ADD_CONTACT_LOADING","GET_CONTACTS_FAILURE","GET_CONTACTS_SUCCESS","GET_CONTACTS_LOADING","UPLOAD_CONTACT_ITEM","CLEAR_CONTACT_ITEM","DELETE_CONTACT_FAILURE","DELETE_CONTACT_SUCCESS","UPDATE_CONTACT_FAILURE","UPDATE_CONTACT_SUCCESS","link","getUser","dispatch","getState","type","token","auth","fetch","method","headers","then","res","data","json","ok","payload","loginUser","body","JSON","stringify","catch","register","logout","localStorage","getItem","getContacts","addContact","uploadContactItem","id","clearContactItem","deleteContact","updateContact"],"mappings":"AAAA,SACIA,aADJ,EAEIC,aAFJ,EAGIC,WAHJ,EAIIC,gBAJJ,EAKIC,gBALJ,EAMIC,cANJ,EAOIC,gBAPJ,EAQIC,eARJ,EASIC,gBATJ,EAUIC,cAVJ,EAWIC,cAXJ,EAYIC,mBAZJ,EAaIC,mBAbJ,EAcIC,mBAdJ,EAeIC,oBAfJ,EAgBIC,oBAhBJ,EAiBIC,oBAjBJ,EAkBIC,mBAlBJ,EAmBIC,kBAnBJ,EAoBIC,sBApBJ,EAqBIC,sBArBJ,EAsBIC,sBAtBJ,EAuBIC,sBAvBJ,QAwBO,uBAxBP;AA2BA,MAAMC,IAAI,GAAG,4BAAb;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACjDD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAErB;AAAR,GAAD,CAAR;AAEA,QAAMsB,KAAK,GAAGF,QAAQ,GAAGG,IAAX,CAAgBD,KAA9B;;AAEA,MAAI,CAACA,KAAL,EAAY;AACR,WAAOH,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEnB;AAAR,KAAD,CAAf;AACH;;AACDsB,EAAAA,KAAK,CAAE,GAAEP,IAAK,gBAAT,EAA0B;AAC3BQ,IAAAA,MAAM,EAAE,MADmB;AAE3BC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAkB,SAAQJ,KAAM;AAF3B;AAFkB,GAA1B,CAAL,CAOKK,IAPL,CAOU,MAAMC,GAAN,IAAa;AACf,UAAMC,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;;AACA,QAAIF,GAAG,CAACG,EAAR,EAAY;AACRZ,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEpB,eAAR;AAAyB+B,QAAAA,OAAO,EAAEH;AAAlC,OAAD,CAAR;AACH,KAFD,MAGK;AACDV,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEnB,gBAAR;AAA0B8B,QAAAA,OAAO,EAAEH;AAAnC,OAAD,CAAR;AACH;AACJ,GAfL;AAgBH,CAxBM;AA0BP,OAAO,MAAMI,SAAS,GAAGJ,IAAI,IAAIV,QAAQ,IAAI;AACzCA,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEzB;AAAR,GAAD,CAAR;AACA4B,EAAAA,KAAK,CAAE,GAAEP,IAAK,iBAAT,EAA2B;AAC5BQ,IAAAA,MAAM,EAAE,MADoB;AAE5BC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFmB;AAK5BQ,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf;AALsB,GAA3B,CAAL,CAOKF,IAPL,CAOU,MAAMC,GAAN,IAAa;AACf,UAAMC,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;;AACA,QAAIF,GAAG,CAACG,EAAR,EAAY;AAERZ,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAE1B,aAAR;AAAuBqC,QAAAA,OAAO,EAAEH;AAAhC,OAAD,CAAR;AACH,KAHD,MAGO;AACHV,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAE3B,aAAR;AAAuBsC,QAAAA,OAAO,EAAEH;AAAhC,OAAD,CAAR;AACH;AACJ,GAfL,EAgBKQ,KAhBL;AAiBH,CAnBM;AAsBP,OAAO,MAAMC,QAAQ,GAAGT,IAAI,IAAIV,QAAQ,IAAI;AACxCA,EAAAA,QAAQ,CAAC;AACLE,IAAAA,IAAI,EAAEtB;AADD,GAAD,CAAR;AAGAyB,EAAAA,KAAK,CAAE,GAAEP,IAAK,oBAAT,EAA8B;AAC/BQ,IAAAA,MAAM,EAAE,MADuB;AAE/BC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFsB;AAK/BQ,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf;AALyB,GAA9B,CAAL,CAOKF,IAPL,CAOU,MAAMC,GAAN,IAAa;AACf,UAAMC,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;;AACA,QAAIF,GAAG,CAACG,EAAR,EAAY;AACRZ,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEvB,gBAAR;AAA0BkC,QAAAA,OAAO,EAAEH;AAAnC,OAAD,CAAR;AACH;AACJ,GAZL;AAaH,CAjBM;AAmBP,OAAO,MAAMU,MAAM,GAAG,MAAMpB,QAAQ,IAAI;AACpC,QAAMG,KAAK,GAAGkB,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACAjB,EAAAA,KAAK,CAAE,GAAEP,IAAK,kBAAT,EAA4B;AAC7BQ,IAAAA,MAAM,EAAE,MADqB;AAE7BC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAkB,SAAQJ,KAAM;AAF3B;AAFoB,GAA5B,CAAL,CAOKK,IAPL,CAOUC,GAAG,IAAI;AACT,QAAIA,GAAG,CAACG,EAAR,EAAY;AACRZ,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAElB;AAAR,OAAD,CAAR;AACH;AACJ,GAXL;AAYH,CAdM;AAiBP,OAAO,MAAMuC,WAAW,GAAG,MAAM,CAACvB,QAAD,EAAWC,QAAX,KAAwB;AACrDD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEX;AAAR,GAAD,CAAR;AAEA,QAAMY,KAAK,GAAGF,QAAQ,GAAGG,IAAX,CAAgBD,KAA9B;;AAEA,MAAI,CAACA,KAAL,EAAY;AACR,WAAOH,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEb;AAAR,KAAD,CAAf;AACH;;AACDgB,EAAAA,KAAK,CAAE,GAAEP,IAAK,WAAT,EAAqB;AACtBQ,IAAAA,MAAM,EAAE,KADc;AAEtBC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAkB,SAAQJ,KAAM;AAF3B;AAFa,GAArB,CAAL,CAOKK,IAPL,CAOU,MAAMC,GAAN,IAAa;AACf,UAAMC,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;;AACA,QAAIF,GAAG,CAACG,EAAR,EAAY;AACRZ,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEZ,oBAAR;AAA8BuB,QAAAA,OAAO,EAAEH;AAAvC,OAAD,CAAR;AACH,KAFD,MAGK;AACDV,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEnB,gBAAR;AAA0B8B,QAAAA,OAAO,EAAEH;AAAnC,OAAD,CAAR;AACH;AACJ,GAfL;AAgBH,CAxBM;AA0BP,OAAO,MAAMc,UAAU,GAAGd,IAAI,IAAI,CAACV,QAAD,EAAWC,QAAX,KAAwB;AACtDD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEd;AAAR,GAAD,CAAR;AAEA,QAAMe,KAAK,GAAGF,QAAQ,GAAGG,IAAX,CAAgBD,KAA9B;;AAEA,MAAI,CAACA,KAAL,EAAY;AACR,WAAOH,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEhB;AAAR,KAAD,CAAf;AACH;;AACDmB,EAAAA,KAAK,CAAE,GAAEP,IAAK,WAAT,EAAqB;AACtBQ,IAAAA,MAAM,EAAE,MADc;AAEtBC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAkB,SAAQJ,KAAM;AAF3B,KAFa;AAMtBY,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf;AANgB,GAArB,CAAL,CAQKF,IARL,CAQU,MAAMC,GAAN,IAAa;AACf,UAAMC,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;;AACA,QAAIF,GAAG,CAACG,EAAR,EAAY;AACRZ,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEf,mBAAR;AAA6B0B,QAAAA,OAAO,EAAEH;AAAtC,OAAD,CAAR;AACH,KAFD,MAGK;AACDV,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEhB,mBAAR;AAA6B2B,QAAAA,OAAO,EAAEH;AAAtC,OAAD,CAAR;AACH;AACJ,GAhBL;AAiBH,CAzBM;AA2BP,OAAO,MAAMe,iBAAiB,GAAGC,EAAE,KAAK;AAAExB,EAAAA,IAAI,EAAEV,mBAAR;AAA6BqB,EAAAA,OAAO,EAAEa;AAAtC,CAAL,CAA5B;AAEP,OAAO,MAAMC,gBAAgB,GAAG,OAAO;AAAEzB,EAAAA,IAAI,EAAET;AAAR,CAAP,CAAzB;AAGP,OAAO,MAAMmC,aAAa,GAAGF,EAAE,IAAI,CAAC1B,QAAD,EAAWC,QAAX,KAAwB;AAEvD,QAAME,KAAK,GAAGF,QAAQ,GAAGG,IAAX,CAAgBD,KAA9B;;AAEA,MAAI,CAACA,KAAL,EAAY;AACR,WAAOH,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAER;AAAR,KAAD,CAAf;AACH;;AACDW,EAAAA,KAAK,CAAE,GAAEP,IAAK,YAAW4B,EAAG,GAAvB,EAA2B;AAC5BpB,IAAAA,MAAM,EAAE,QADoB;AAE5BC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAkB,SAAQJ,KAAM;AAF3B;AAFmB,GAA3B,CAAL,CAOKK,IAPL,CAOUC,GAAG,IAAI;AACT,QAAIA,GAAG,CAACG,EAAR,EAAY;AACRZ,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEP,sBAAR;AAAgCkB,QAAAA,OAAO,EAAEa;AAAzC,OAAD,CAAR;AACH,KAFD,MAGK;AACD1B,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEhB;AAAR,OAAD,CAAR;AACH;AACJ,GAdL;AAeH,CAtBM;AAyBP,OAAO,MAAM2C,aAAa,GAAGnB,IAAI,IAAI,CAACV,QAAD,EAAWC,QAAX,KAAwB;AACzD,QAAME,KAAK,GAAGF,QAAQ,GAAGG,IAAX,CAAgBD,KAA9B;;AAEA,MAAI,CAACA,KAAL,EAAY;AACR,WAAOH,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEN;AAAR,KAAD,CAAf;AACH;;AACDS,EAAAA,KAAK,CAAE,GAAEP,IAAK,YAAWY,IAAI,CAACgB,EAAG,GAA5B,EAAgC;AACjCpB,IAAAA,MAAM,EAAE,KADyB;AAEjCC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAkB,SAAQJ,KAAM;AAF3B,KAFwB;AAMjCY,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf;AAN2B,GAAhC,CAAL,CAQKF,IARL,CAQU,MAAMC,GAAN,IAAa;AACf,UAAMC,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;;AACA,QAAIF,GAAG,CAACG,EAAR,EAAY;AACRZ,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEL,sBAAR;AAAgCgB,QAAAA,OAAO,EAAEH;AAAzC,OAAD,CAAR;AACH,KAFD,MAGK;AACDV,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEN,sBAAR;AAAgCiB,QAAAA,OAAO,EAAEH;AAAzC,OAAD,CAAR;AACH;AACJ,GAhBL;AAiBH,CAvBM","sourcesContent":["import {\r\n    LOGIN_FAILURE,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FETCH,\r\n    REGISTER_FAILURE,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FETCH,\r\n    GET_USER_LOADING,\r\n    GET_USER_LOADED,\r\n    GET_USER_FAILURE,\r\n    LOGOUT_SUCCESS,\r\n    LOGOUT_FAILURE,\r\n    ADD_CONTACT_FAILURE,\r\n    ADD_CONTACT_SUCCESS,\r\n    ADD_CONTACT_LOADING,\r\n    GET_CONTACTS_FAILURE,\r\n    GET_CONTACTS_SUCCESS,\r\n    GET_CONTACTS_LOADING,\r\n    UPLOAD_CONTACT_ITEM,\r\n    CLEAR_CONTACT_ITEM,\r\n    DELETE_CONTACT_FAILURE,\r\n    DELETE_CONTACT_SUCCESS,\r\n    UPDATE_CONTACT_FAILURE,\r\n    UPDATE_CONTACT_SUCCESS\r\n} from '../redux/action-types';\r\n\r\n\r\nconst link = 'http://127.0.0.1:8000/api/';\r\n\r\nexport const getUser = () => (dispatch, getState) => {\r\n    dispatch({ type: GET_USER_LOADING })\r\n\r\n    const token = getState().auth.token;\r\n\r\n    if (!token) {\r\n        return dispatch({ type: GET_USER_FAILURE })\r\n    }\r\n    fetch(`${link}accounts/user/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Token ${token}`,\r\n        }\r\n    })\r\n        .then(async res => {\r\n            const data = await res.json();\r\n            if (res.ok) {\r\n                dispatch({ type: GET_USER_LOADED, payload: data })\r\n            }\r\n            else {\r\n                dispatch({ type: GET_USER_FAILURE, payload: data })\r\n            }\r\n        })\r\n}\r\n\r\nexport const loginUser = data => dispatch => {\r\n    dispatch({ type: LOGIN_FETCH })\r\n    fetch(`${link}accounts/login/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(async res => {\r\n            const data = await res.json();\r\n            if (res.ok) {\r\n                \r\n                dispatch({ type: LOGIN_SUCCESS, payload: data })\r\n            } else {\r\n                dispatch({ type: LOGIN_FAILURE, payload: data })\r\n            }\r\n        })\r\n        .catch()\r\n}\r\n\r\n\r\nexport const register = data => dispatch => {\r\n    dispatch({\r\n        type: REGISTER_FETCH\r\n    })\r\n    fetch(`${link}accounts/register/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(async res => {\r\n            const data = await res.json();\r\n            if (res.ok) {\r\n                dispatch({ type: REGISTER_SUCCESS, payload: data })\r\n            }\r\n        })\r\n}\r\n\r\nexport const logout = () => dispatch => {\r\n    const token = localStorage.getItem('token')\r\n    fetch(`${link}accounts/logout/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `token ${token}`\r\n        },\r\n    })\r\n        .then(res => {\r\n            if (res.ok) {\r\n                dispatch({ type: LOGOUT_SUCCESS })\r\n            }\r\n        })\r\n}\r\n\r\n\r\nexport const getContacts = () => (dispatch, getState) => {\r\n    dispatch({ type: GET_CONTACTS_LOADING })\r\n\r\n    const token = getState().auth.token;\r\n\r\n    if (!token) {\r\n        return dispatch({ type: GET_CONTACTS_FAILURE })\r\n    }\r\n    fetch(`${link}contacts/`, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Token ${token}`,\r\n        }\r\n    })\r\n        .then(async res => {\r\n            const data = await res.json();\r\n            if (res.ok) {\r\n                dispatch({ type: GET_CONTACTS_SUCCESS, payload: data })\r\n            }\r\n            else {\r\n                dispatch({ type: GET_USER_FAILURE, payload: data })\r\n            }\r\n        })\r\n}\r\n\r\nexport const addContact = data => (dispatch, getState) => {\r\n    dispatch({ type: ADD_CONTACT_LOADING })\r\n\r\n    const token = getState().auth.token;\r\n\r\n    if (!token) {\r\n        return dispatch({ type: ADD_CONTACT_FAILURE })\r\n    }\r\n    fetch(`${link}contacts/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Token ${token}`,\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(async res => {\r\n            const data = await res.json();\r\n            if (res.ok) {\r\n                dispatch({ type: ADD_CONTACT_SUCCESS, payload: data });\r\n            }\r\n            else {\r\n                dispatch({ type: ADD_CONTACT_FAILURE, payload: data });\r\n            }\r\n        })\r\n}\r\n\r\nexport const uploadContactItem = id => ({ type: UPLOAD_CONTACT_ITEM, payload: id })\r\n\r\nexport const clearContactItem = () => ({ type: CLEAR_CONTACT_ITEM })\r\n\r\n\r\nexport const deleteContact = id => (dispatch, getState) => {\r\n\r\n    const token = getState().auth.token;\r\n\r\n    if (!token) {\r\n        return dispatch({ type: DELETE_CONTACT_FAILURE })\r\n    }\r\n    fetch(`${link}contacts/${id}/`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Token ${token}`,\r\n        },\r\n    })\r\n        .then(res => {\r\n            if (res.ok) {\r\n                dispatch({ type: DELETE_CONTACT_SUCCESS, payload: id })\r\n            }\r\n            else {\r\n                dispatch({ type: ADD_CONTACT_FAILURE })\r\n            }\r\n        })\r\n}\r\n\r\n\r\nexport const updateContact = data => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n\r\n    if (!token) {\r\n        return dispatch({ type: UPDATE_CONTACT_FAILURE })\r\n    }\r\n    fetch(`${link}contacts/${data.id}/`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Token ${token}`,\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(async res => {\r\n            const data = await res.json();\r\n            if (res.ok) {\r\n                dispatch({ type: UPDATE_CONTACT_SUCCESS, payload: data })\r\n            }\r\n            else {\r\n                dispatch({ type: UPDATE_CONTACT_FAILURE, payload: data })\r\n            }\r\n        })\r\n}"]},"metadata":{},"sourceType":"module"}