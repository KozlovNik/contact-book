{"ast":null,"code":"import { LOGIN_FAILURE, LOGIN_SUCCESS, LOGIN_FETCH, REGISTER_FAILURE, REGISTER_SUCCESS, REGISTER_FETCH, GET_USER_LOADING, GET_USER_LOADED, GET_USER_FAILURE, LOGOUT_SUCCESS, LOGOUT_FAILURE, ADD_CONTACT_FAILURE, ADD_CONTACT_SUCCESS, ADD_CONTACT_LOADING, GET_CONTACTS_FAILURE, GET_CONTACTS_SUCCESS, GET_CONTACTS_LOADING, up } from '../redux/action-types';\nconst link = 'http://127.0.0.1:8000/api/';\nexport const getUser = () => (dispatch, getState) => {\n  dispatch({\n    type: GET_USER_LOADING\n  });\n  const token = getState().auth.token;\n\n  if (!token) {\n    return dispatch({\n      type: GET_USER_FAILURE\n    });\n  }\n\n  fetch(`${link}accounts/user/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Token ${token}`\n    }\n  }).then(async res => {\n    const data = await res.json();\n\n    if (res.ok) {\n      dispatch({\n        type: GET_USER_LOADED,\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: GET_USER_FAILURE,\n        payload: data\n      });\n    }\n  }); // .then(data => { console.log(data) })\n};\nexport const loginUser = (data, cb) => dispatch => {\n  dispatch({\n    type: LOGIN_FETCH\n  });\n  fetch(`${link}accounts/login/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(async res => {\n    const data = await res.json();\n\n    if (res.ok) {\n      localStorage.setItem('token', data.token);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: data\n      });\n    } else {\n      console.log(data);\n      dispatch({\n        type: LOGIN_FAILURE,\n        payload: data\n      });\n    }\n  }).catch();\n};\nexport const register = data => dispatch => {\n  dispatch({\n    type: REGISTER_FETCH\n  });\n  fetch(`${link}accounts/register/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(async res => {\n    const data = await res.json();\n\n    if (res.ok) {\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: data\n      });\n      console.log('what the fuck');\n    }\n  });\n};\nexport const logout = () => (dispatch, getState) => {\n  const token = localStorage.getItem('token');\n  fetch(`${link}accounts/logout/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `token ${token}`\n    }\n  }).then(res => {\n    if (res.ok) {\n      dispatch({\n        type: LOGOUT_SUCCESS\n      });\n    }\n  });\n};\nexport const getContacts = () => (dispatch, getState) => {\n  dispatch({\n    type: GET_CONTACTS_LOADING\n  });\n  const token = getState().auth.token;\n\n  if (!token) {\n    return dispatch({\n      type: GET_CONTACTS_FAILURE\n    });\n  }\n\n  fetch(`${link}contacts/`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Token ${token}`\n    }\n  }).then(async res => {\n    const data = await res.json();\n\n    if (res.ok) {\n      dispatch({\n        type: GET_CONTACTS_SUCCESS,\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: GET_USER_FAILURE,\n        payload: data\n      });\n    }\n  });\n};\nexport const addContact = data => (dispatch, getState) => {\n  console.log(data);\n  dispatch({\n    type: ADD_CONTACT_LOADING\n  });\n  const token = getState().auth.token;\n\n  if (!token) {\n    return dispatch({\n      type: ADD_CONTACT_FAILURE\n    });\n  }\n\n  fetch(`${link}contacts/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Token ${token}`\n    },\n    body: JSON.stringify(data)\n  }).then(async res => {\n    const data = await res.json();\n    console.log(data);\n\n    if (res.ok) {\n      dispatch({\n        type: ADD_CONTACT_SUCCESS,\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: ADD_CONTACT_FAILURE,\n        payload: data\n      });\n    }\n  });\n};\nexport const uploadContactItem = id => {\n  return {\n    type: ADD_CONTACT_FAILURE,\n    payload: data\n  };\n};","map":{"version":3,"sources":["C:/Users/zcczz/Desktop/contact book/contactbook/frontend/src/redux/actions.js"],"names":["LOGIN_FAILURE","LOGIN_SUCCESS","LOGIN_FETCH","REGISTER_FAILURE","REGISTER_SUCCESS","REGISTER_FETCH","GET_USER_LOADING","GET_USER_LOADED","GET_USER_FAILURE","LOGOUT_SUCCESS","LOGOUT_FAILURE","ADD_CONTACT_FAILURE","ADD_CONTACT_SUCCESS","ADD_CONTACT_LOADING","GET_CONTACTS_FAILURE","GET_CONTACTS_SUCCESS","GET_CONTACTS_LOADING","up","link","getUser","dispatch","getState","type","token","auth","fetch","method","headers","then","res","data","json","ok","payload","loginUser","cb","body","JSON","stringify","localStorage","setItem","console","log","catch","register","logout","getItem","getContacts","addContact","uploadContactItem","id"],"mappings":"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","sourcesContent":["import {\r\n    LOGIN_FAILURE,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FETCH,\r\n    REGISTER_FAILURE,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FETCH,\r\n    GET_USER_LOADING,\r\n    GET_USER_LOADED,\r\n    GET_USER_FAILURE,\r\n    LOGOUT_SUCCESS,\r\n    LOGOUT_FAILURE,\r\n    ADD_CONTACT_FAILURE,\r\n    ADD_CONTACT_SUCCESS,\r\n    ADD_CONTACT_LOADING,\r\n    GET_CONTACTS_FAILURE,\r\n    GET_CONTACTS_SUCCESS,\r\n    GET_CONTACTS_LOADING,\r\n    up\r\n} from '../redux/action-types';\r\n\r\n\r\nconst link = 'http://127.0.0.1:8000/api/';\r\n\r\nexport const getUser = () => (dispatch, getState) => {\r\n    dispatch({ type: GET_USER_LOADING })\r\n\r\n    const token = getState().auth.token\r\n\r\n    if (!token) {\r\n        return dispatch({ type: GET_USER_FAILURE })\r\n    }\r\n    fetch(`${link}accounts/user/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Token ${token}`,\r\n        }\r\n    })\r\n        .then(async res => {\r\n            const data = await res.json();\r\n            if (res.ok) {\r\n                dispatch({ type: GET_USER_LOADED, payload: data });\r\n            }\r\n            else {\r\n                dispatch({\r\n                    type: GET_USER_FAILURE, payload: data\r\n                });\r\n            }\r\n        })\r\n    // .then(data => { console.log(data) })\r\n}\r\n\r\nexport const loginUser = (data, cb) => dispatch => {\r\n    dispatch({ type: LOGIN_FETCH })\r\n    fetch(`${link}accounts/login/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(async res => {\r\n            const data = await res.json();\r\n            if (res.ok) {\r\n                localStorage.setItem('token', data.token)\r\n                dispatch({ type: LOGIN_SUCCESS, payload: data })\r\n\r\n            } else {\r\n                console.log(data);\r\n                dispatch({ type: LOGIN_FAILURE, payload: data })\r\n            }\r\n        })\r\n        .catch()\r\n}\r\n\r\n\r\nexport const register = data => dispatch => {\r\n    dispatch({\r\n        type: REGISTER_FETCH\r\n    })\r\n    fetch(`${link}accounts/register/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(async res => {\r\n            const data = await res.json();\r\n            if (res.ok) {\r\n                dispatch({\r\n                    type: REGISTER_SUCCESS,\r\n                    payload: data\r\n                });\r\n                console.log('what the fuck')\r\n            }\r\n        })\r\n}\r\n\r\nexport const logout = () => (dispatch, getState) => {\r\n    const token = localStorage.getItem('token')\r\n    fetch(`${link}accounts/logout/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `token ${token}`\r\n        },\r\n    })\r\n        .then(res => {\r\n            if (res.ok) {\r\n                dispatch({ type: LOGOUT_SUCCESS })\r\n            }\r\n        })\r\n}\r\n\r\n\r\nexport const getContacts = () => (dispatch, getState) => {\r\n    dispatch({ type: GET_CONTACTS_LOADING })\r\n\r\n    const token = getState().auth.token\r\n\r\n    if (!token) {\r\n        return dispatch({ type: GET_CONTACTS_FAILURE })\r\n    }\r\n    fetch(`${link}contacts/`, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Token ${token}`,\r\n        }\r\n    })\r\n        .then(async res => {\r\n            const data = await res.json();\r\n            if (res.ok) {\r\n                dispatch({ type: GET_CONTACTS_SUCCESS, payload: data });\r\n            }\r\n            else {\r\n                dispatch({\r\n                    type: GET_USER_FAILURE, payload: data\r\n                });\r\n            }\r\n        })\r\n}\r\n\r\nexport const addContact = (data) => (dispatch, getState) => {\r\n    console.log(data);\r\n    dispatch({ type: ADD_CONTACT_LOADING })\r\n\r\n    const token = getState().auth.token;\r\n\r\n    if (!token) {\r\n        return dispatch({ type: ADD_CONTACT_FAILURE })\r\n    }\r\n    fetch(`${link}contacts/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Token ${token}`,\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(async res => {\r\n            const data = await res.json();\r\n            console.log(data);\r\n            if (res.ok) {\r\n                dispatch({ type: ADD_CONTACT_SUCCESS, payload: data });\r\n            }\r\n            else {\r\n                dispatch({\r\n                    type: ADD_CONTACT_FAILURE, payload: data\r\n                });\r\n            }\r\n        })\r\n}\r\n\r\nexport const uploadContactItem = (id) => {\r\n    return {\r\n        type: ADD_CONTACT_FAILURE, payload: data\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}