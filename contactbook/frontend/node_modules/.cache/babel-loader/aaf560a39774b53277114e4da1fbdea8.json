{"ast":null,"code":"import { LOGIN_FAILURE, LOGIN_SUCCESS, LOGIN_FETCH, REGISTER_FAILURE, REGISTER_SUCCESS, REGISTER_FETCH, USER_LOADING, USER_LOADED, USER_FAILURE } from '../redux/action-types';\nconst link = 'http://127.0.0.1:8000/api/accounts/';\nexport const getUser = () => dispatch => {\n  dispatch({\n    type: USER_LOADING\n  });\n  const token = localStorage.getItem('token');\n\n  if (!token) {\n    dispatch({\n      type: USER_FAILURE\n    });\n  } else {}\n};\nexport const loginUser = data => dispatch => {\n  dispatch({\n    type: LOGIN_FETCH\n  });\n  fetch(`${link}login/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(res => {\n    return res.json().then(data => {\n      if (res.ok) {\n        dispatch({\n          type: LOGIN_SUCCESS,\n          payload: data\n        });\n      } else {\n        dispatch({\n          type: LOGIN_FAILURE,\n          payload: data\n        });\n      }\n    });\n  }).then(data => {\n    console.log(data);\n  });\n};\nexport const register = data => dispatch => {\n  dispatch({\n    type: REGISTER_FETCH\n  });\n  fetch(`${link}register/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(res => {\n    return res.json().then(data => {\n      if (res.ok) {\n        dispatch({\n          type: REGISTER_SUCCESS,\n          payload: data\n        });\n      }\n    });\n  }).then(data => {\n    console.log(data);\n  });\n};","map":{"version":3,"sources":["C:/Users/zcczz/Desktop/contact book/contactbook/frontend/src/redux/actions.js"],"names":["LOGIN_FAILURE","LOGIN_SUCCESS","LOGIN_FETCH","REGISTER_FAILURE","REGISTER_SUCCESS","REGISTER_FETCH","USER_LOADING","USER_LOADED","USER_FAILURE","link","getUser","dispatch","type","token","localStorage","getItem","loginUser","data","fetch","method","headers","body","JSON","stringify","then","res","json","ok","payload","console","log","register"],"mappings":"AAAA,SACIA,aADJ,EAEIC,aAFJ,EAGIC,WAHJ,EAIIC,gBAJJ,EAKIC,gBALJ,EAMIC,cANJ,EAOIC,YAPJ,EAQIC,WARJ,EASIC,YATJ,QAUO,uBAVP;AAWA,MAAMC,IAAI,GAAG,qCAAb;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAMC,QAAQ,IAAI;AACrCA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAEN;AADD,GAAD,CAAR;AAIA,QAAMO,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AAEA,MAAI,CAACF,KAAL,EAAY;AACRF,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEJ;AADD,KAAD,CAAR;AAGH,GAJD,MAIO,CAEN;AAGJ,CAhBM;AAkBP,OAAO,MAAMQ,SAAS,GAAIC,IAAD,IAAUN,QAAQ,IAAI;AAC3CA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAEV;AADD,GAAD,CAAR;AAGAgB,EAAAA,KAAK,CAAE,GAAET,IAAK,QAAT,EAAkB;AACnBU,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFU;AAKnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AALa,GAAlB,CAAL,CAOKO,IAPL,CAOUC,GAAG,IAAI;AACT,WAAOA,GAAG,CAACC,IAAJ,GACFF,IADE,CACIP,IAAD,IAAU;AACZ,UAAIQ,GAAG,CAACE,EAAR,EAAY;AACRhB,QAAAA,QAAQ,CAAC;AACLC,UAAAA,IAAI,EAAEX,aADD;AAEL2B,UAAAA,OAAO,EAAEX;AAFJ,SAAD,CAAR;AAIH,OALD,MAKO;AACHN,QAAAA,QAAQ,CAAC;AACLC,UAAAA,IAAI,EAAEZ,aADD;AAEL4B,UAAAA,OAAO,EAAEX;AAFJ,SAAD,CAAR;AAIH;AACJ,KAbE,CAAP;AAcH,GAtBL,EAuBKO,IAvBL,CAuBUP,IAAI,IAAI;AAAEY,IAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AAAmB,GAvBvC;AAwBH,CA5BM;AA+BP,OAAO,MAAMc,QAAQ,GAAId,IAAD,IAAUN,QAAQ,IAAI;AAC1CA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAEP;AADD,GAAD,CAAR;AAGAa,EAAAA,KAAK,CAAE,GAAET,IAAK,WAAT,EAAqB;AACtBU,IAAAA,MAAM,EAAE,MADc;AAEtBC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFa;AAKtBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AALgB,GAArB,CAAL,CAOKO,IAPL,CAOWC,GAAD,IAAS;AACX,WAAOA,GAAG,CAACC,IAAJ,GACFF,IADE,CACIP,IAAD,IAAU;AACZ,UAAIQ,GAAG,CAACE,EAAR,EAAY;AACRhB,QAAAA,QAAQ,CAAC;AACLC,UAAAA,IAAI,EAAER,gBADD;AAELwB,UAAAA,OAAO,EAAEX;AAFJ,SAAD,CAAR;AAIH;AACJ,KARE,CAAP;AASH,GAjBL,EAkBKO,IAlBL,CAkBUP,IAAI,IAAI;AAAEY,IAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AAAmB,GAlBvC;AAmBH,CAvBM","sourcesContent":["import {\r\n    LOGIN_FAILURE,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FETCH,\r\n    REGISTER_FAILURE,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FETCH,\r\n    USER_LOADING,\r\n    USER_LOADED,\r\n    USER_FAILURE\r\n} from '../redux/action-types';\r\nconst link = 'http://127.0.0.1:8000/api/accounts/';\r\n\r\nexport const getUser = () => dispatch => {\r\n    dispatch({\r\n        type: USER_LOADING\r\n    })\r\n\r\n    const token = localStorage.getItem('token');\r\n\r\n    if (!token) {\r\n        dispatch({\r\n            type: USER_FAILURE\r\n        })\r\n    } else {\r\n\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport const loginUser = (data) => dispatch => {\r\n    dispatch({\r\n        type: LOGIN_FETCH\r\n    })\r\n    fetch(`${link}login/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(res => {\r\n            return res.json()\r\n                .then((data) => {\r\n                    if (res.ok) {\r\n                        dispatch({\r\n                            type: LOGIN_SUCCESS,\r\n                            payload: data\r\n                        })\r\n                    } else {\r\n                        dispatch({\r\n                            type: LOGIN_FAILURE,\r\n                            payload: data\r\n                        })\r\n                    }\r\n                })\r\n        })\r\n        .then(data => { console.log(data) })\r\n}\r\n\r\n\r\nexport const register = (data) => dispatch => {\r\n    dispatch({\r\n        type: REGISTER_FETCH\r\n    })\r\n    fetch(`${link}register/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then((res) => {\r\n            return res.json()\r\n                .then((data) => {\r\n                    if (res.ok) {\r\n                        dispatch({\r\n                            type: REGISTER_SUCCESS,\r\n                            payload: data\r\n                        })\r\n                    }\r\n                })\r\n        })\r\n        .then(data => { console.log(data) })\r\n}"]},"metadata":{},"sourceType":"module"}