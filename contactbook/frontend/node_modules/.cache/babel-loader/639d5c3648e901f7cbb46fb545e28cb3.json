{"ast":null,"code":"import { LOGIN_FAILURE, LOGIN_SUCCESS, LOGIN_FETCH, REGISTER_FAILURE, REGISTER_SUCCESS, REGISTER_FETCH, GET_USER_LOADING, GET_USER_LOADED, GET_USER_FAILURE, LOGOUT_SUCCESS, LOGOUT_FAILURE } from '../redux/action-types';\nconst link = 'http://127.0.0.1:8000/api/accounts/';\nexport const getUser = () => (dispatch, getState) => {\n  dispatch({\n    type: GET_USER_LOADING\n  });\n  const token = getState().auth.token;\n\n  if (!token) {\n    return dispatch({\n      type: GET_USER_FAILURE\n    });\n  }\n\n  fetch(`${link}user/`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Token ${token}`\n    }\n  }).then(res => {\n    return res.json().then(data => {\n      if (res.ok) {\n        dispatch({\n          type: GET_USER_LOADED,\n          payload: data\n        });\n      } else {\n        dispatch({\n          type: GET_USER_FAILURE,\n          payload: data\n        });\n      }\n    });\n  }).then(data => {\n    console.log(data);\n  });\n};\nexport const loginUser = data => dispatch => {\n  dispatch({\n    type: LOGIN_FETCH\n  });\n  fetch(`${link}login/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(res => {\n    return res.json().then(data => {\n      if (res.ok) {\n        localStorage.setItem('token', data.token);\n        dispatch({\n          type: LOGIN_SUCCESS,\n          payload: data\n        });\n      } else {\n        dispatch({\n          type: LOGIN_FAILURE,\n          payload: data\n        });\n      }\n    });\n  }).then(data => {\n    console.log(data);\n  });\n};\nexport const register = data => dispatch => {\n  dispatch({\n    type: REGISTER_FETCH\n  });\n  fetch(`${link}register/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(res => {\n    return res.json().then(data => {\n      if (res.ok) {\n        dispatch({\n          type: REGISTER_SUCCESS,\n          payload: data\n        });\n      }\n    });\n  }).then(data => {\n    console.log(data);\n  });\n};\nexport const logout = data => (dispatch, getState) => {\n  token = getState().auth.token;\n  fetch(`${link}logout/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(res => {\n    console.log(res);\n\n    if (res.ok) {\n      dispatch({\n        type: LOGOUT_SUCCESS,\n        payload: data\n      });\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/zcczz/Desktop/contact book/contactbook/frontend/src/redux/actions.js"],"names":["LOGIN_FAILURE","LOGIN_SUCCESS","LOGIN_FETCH","REGISTER_FAILURE","REGISTER_SUCCESS","REGISTER_FETCH","GET_USER_LOADING","GET_USER_LOADED","GET_USER_FAILURE","LOGOUT_SUCCESS","LOGOUT_FAILURE","link","getUser","dispatch","getState","type","token","auth","fetch","method","headers","then","res","json","data","ok","payload","console","log","loginUser","body","JSON","stringify","localStorage","setItem","register","logout"],"mappings":"AAAA,SACIA,aADJ,EAEIC,aAFJ,EAGIC,WAHJ,EAIIC,gBAJJ,EAKIC,gBALJ,EAMIC,cANJ,EAOIC,gBAPJ,EAQIC,eARJ,EASIC,gBATJ,EAUIC,cAVJ,EAWIC,cAXJ,QAYO,uBAZP;AAaA,MAAMC,IAAI,GAAG,qCAAb;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACjDD,EAAAA,QAAQ,CAAC;AACLE,IAAAA,IAAI,EAAET;AADD,GAAD,CAAR;AAIA,QAAMU,KAAK,GAAGF,QAAQ,GAAGG,IAAX,CAAgBD,KAA9B;;AAEA,MAAI,CAACA,KAAL,EAAY;AACR,WAAOH,QAAQ,CAAC;AACZE,MAAAA,IAAI,EAAEP;AADM,KAAD,CAAf;AAGH;;AACDU,EAAAA,KAAK,CAAE,GAAEP,IAAK,OAAT,EAAiB;AAClBQ,IAAAA,MAAM,EAAE,KADU;AAElBC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAkB,SAAQJ,KAAM;AAF3B;AAFS,GAAjB,CAAL,CAOKK,IAPL,CAOUC,GAAG,IAAI;AACT,WAAOA,GAAG,CAACC,IAAJ,GACFF,IADE,CACIG,IAAD,IAAU;AACZ,UAAIF,GAAG,CAACG,EAAR,EAAY;AACRZ,QAAAA,QAAQ,CAAC;AACLE,UAAAA,IAAI,EAAER,eADD;AAELmB,UAAAA,OAAO,EAAEF;AAFJ,SAAD,CAAR;AAIH,OALD,MAKO;AACHX,QAAAA,QAAQ,CAAC;AACLE,UAAAA,IAAI,EAAEP,gBADD;AAELkB,UAAAA,OAAO,EAAEF;AAFJ,SAAD,CAAR;AAIH;AACJ,KAbE,CAAP;AAcH,GAtBL,EAuBKH,IAvBL,CAuBUG,IAAI,IAAI;AAAEG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AAAmB,GAvBvC;AAwBH,CApCM;AAsCP,OAAO,MAAMK,SAAS,GAAIL,IAAD,IAAWX,QAAD,IAAc;AAC7CA,EAAAA,QAAQ,CAAC;AACLE,IAAAA,IAAI,EAAEb;AADD,GAAD,CAAR;AAGAgB,EAAAA,KAAK,CAAE,GAAEP,IAAK,QAAT,EAAkB;AACnBQ,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFU;AAKnBU,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,IAAf;AALa,GAAlB,CAAL,CAOKH,IAPL,CAOUC,GAAG,IAAI;AACT,WAAOA,GAAG,CAACC,IAAJ,GACFF,IADE,CACIG,IAAD,IAAU;AACZ,UAAIF,GAAG,CAACG,EAAR,EAAY;AACRQ,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BV,IAAI,CAACR,KAAnC;AACAH,QAAAA,QAAQ,CAAC;AACLE,UAAAA,IAAI,EAAEd,aADD;AAELyB,UAAAA,OAAO,EAAEF;AAFJ,SAAD,CAAR;AAIH,OAND,MAMO;AACHX,QAAAA,QAAQ,CAAC;AACLE,UAAAA,IAAI,EAAEf,aADD;AAEL0B,UAAAA,OAAO,EAAEF;AAFJ,SAAD,CAAR;AAIH;AACJ,KAdE,CAAP;AAeH,GAvBL,EAwBKH,IAxBL,CAwBUG,IAAI,IAAI;AAAEG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AAAmB,GAxBvC;AAyBH,CA7BM;AAgCP,OAAO,MAAMW,QAAQ,GAAIX,IAAD,IAAUX,QAAQ,IAAI;AAC1CA,EAAAA,QAAQ,CAAC;AACLE,IAAAA,IAAI,EAAEV;AADD,GAAD,CAAR;AAGAa,EAAAA,KAAK,CAAE,GAAEP,IAAK,WAAT,EAAqB;AACtBQ,IAAAA,MAAM,EAAE,MADc;AAEtBC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFa;AAKtBU,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,IAAf;AALgB,GAArB,CAAL,CAOKH,IAPL,CAOWC,GAAD,IAAS;AACX,WAAOA,GAAG,CAACC,IAAJ,GACFF,IADE,CACIG,IAAD,IAAU;AACZ,UAAIF,GAAG,CAACG,EAAR,EAAY;AACRZ,QAAAA,QAAQ,CAAC;AACLE,UAAAA,IAAI,EAAEX,gBADD;AAELsB,UAAAA,OAAO,EAAEF;AAFJ,SAAD,CAAR;AAIH;AACJ,KARE,CAAP;AASH,GAjBL,EAkBKH,IAlBL,CAkBUG,IAAI,IAAI;AAAEG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AAAmB,GAlBvC;AAmBH,CAvBM;AAyBP,OAAO,MAAMY,MAAM,GAAIZ,IAAD,IAAU,CAACX,QAAD,EAAWC,QAAX,KAAwB;AACpDE,EAAAA,KAAK,GAAGF,QAAQ,GAAGG,IAAX,CAAgBD,KAAxB;AACAE,EAAAA,KAAK,CAAE,GAAEP,IAAK,SAAT,EAAmB;AACpBQ,IAAAA,MAAM,EAAE,MADY;AAEpBC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFW;AAKpBU,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,IAAf;AALc,GAAnB,CAAL,CAOKH,IAPL,CAOWC,GAAD,IAAS;AACXK,IAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;;AACA,QAAIA,GAAG,CAACG,EAAR,EAAY;AACRZ,MAAAA,QAAQ,CAAC;AACLE,QAAAA,IAAI,EAAEN,cADD;AAELiB,QAAAA,OAAO,EAAEF;AAFJ,OAAD,CAAR;AAIH;AACJ,GAfL;AAgBH,CAlBM","sourcesContent":["import {\r\n    LOGIN_FAILURE,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FETCH,\r\n    REGISTER_FAILURE,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FETCH,\r\n    GET_USER_LOADING,\r\n    GET_USER_LOADED,\r\n    GET_USER_FAILURE,\r\n    LOGOUT_SUCCESS,\r\n    LOGOUT_FAILURE\r\n} from '../redux/action-types';\r\nconst link = 'http://127.0.0.1:8000/api/accounts/';\r\n\r\nexport const getUser = () => (dispatch, getState) => {\r\n    dispatch({\r\n        type: GET_USER_LOADING\r\n    })\r\n\r\n    const token = getState().auth.token\r\n\r\n    if (!token) {\r\n        return dispatch({\r\n            type: GET_USER_FAILURE\r\n        })\r\n    }\r\n    fetch(`${link}user/`, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Token ${token}`,\r\n        }\r\n    })\r\n        .then(res => {\r\n            return res.json()\r\n                .then((data) => {\r\n                    if (res.ok) {\r\n                        dispatch({\r\n                            type: GET_USER_LOADED,\r\n                            payload: data\r\n                        })\r\n                    } else {\r\n                        dispatch({\r\n                            type: GET_USER_FAILURE,\r\n                            payload: data\r\n                        })\r\n                    }\r\n                })\r\n        })\r\n        .then(data => { console.log(data) })\r\n}\r\n\r\nexport const loginUser = (data) => (dispatch) => {\r\n    dispatch({\r\n        type: LOGIN_FETCH\r\n    })\r\n    fetch(`${link}login/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(res => {\r\n            return res.json()\r\n                .then((data) => {\r\n                    if (res.ok) {\r\n                        localStorage.setItem('token', data.token)\r\n                        dispatch({\r\n                            type: LOGIN_SUCCESS,\r\n                            payload: data\r\n                        })\r\n                    } else {\r\n                        dispatch({\r\n                            type: LOGIN_FAILURE,\r\n                            payload: data\r\n                        })\r\n                    }\r\n                })\r\n        })\r\n        .then(data => { console.log(data) })\r\n}\r\n\r\n\r\nexport const register = (data) => dispatch => {\r\n    dispatch({\r\n        type: REGISTER_FETCH\r\n    })\r\n    fetch(`${link}register/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then((res) => {\r\n            return res.json()\r\n                .then((data) => {\r\n                    if (res.ok) {\r\n                        dispatch({\r\n                            type: REGISTER_SUCCESS,\r\n                            payload: data\r\n                        })\r\n                    }\r\n                })\r\n        })\r\n        .then(data => { console.log(data) })\r\n}\r\n\r\nexport const logout = (data) => (dispatch, getState) => {\r\n    token = getState().auth.token\r\n    fetch(`${link}logout/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then((res) => {\r\n            console.log(res)\r\n            if (res.ok) {\r\n                dispatch({\r\n                    type: LOGOUT_SUCCESS,\r\n                    payload: data\r\n                })\r\n            }\r\n        })\r\n}"]},"metadata":{},"sourceType":"module"}