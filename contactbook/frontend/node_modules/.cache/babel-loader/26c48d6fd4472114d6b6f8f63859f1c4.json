{"ast":null,"code":"import { LOGIN_FAILURE, LOGIN_SUCCESS, LOGIN_FETCH, REGISTER_FAILURE, REGISTER_SUCCESS, REGISTER_FETCH, GET_USER_LOADING, GET_USER_LOADED, GET_USER_FAILURE, LOGOUT_SUCCESS, LOGOUT_FAILURE, ADD_CONTACT_FAILURE, ADD_CONTACT_SUCCESS, ADD_CONTACT_LOADING, GET_CONTACTS_FAILURE, GET_CONTACTS_SUCCESS, GET } from '../redux/action-types';\nconst link = 'http://127.0.0.1:8000/api/accounts/';\nexport const getUser = () => (dispatch, getState) => {\n  dispatch({\n    type: GET_USER_LOADING\n  });\n  const token = getState().auth.token;\n\n  if (!token) {\n    return dispatch({\n      type: GET_USER_FAILURE\n    });\n  }\n\n  fetch(`${link}user/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Token ${token}`\n    }\n  }).then(async res => {\n    const data = await res.json();\n\n    if (res.ok) {\n      dispatch({\n        type: GET_USER_LOADED,\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: GET_USER_FAILURE,\n        payload: data\n      });\n    }\n  }).then(data => {\n    console.log(data);\n  });\n};\nexport const loginUser = (data, cb) => dispatch => {\n  dispatch({\n    type: LOGIN_FETCH\n  });\n  fetch(`${link}login/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(async res => {\n    const data = await res.json();\n\n    if (res.ok) {\n      localStorage.setItem('token', data.token);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: data\n      });\n    } else {\n      console.log(data);\n      dispatch({\n        type: LOGIN_FAILURE,\n        payload: data\n      });\n    }\n  }).catch();\n};\nexport const register = data => dispatch => {\n  dispatch({\n    type: REGISTER_FETCH\n  });\n  fetch(`${link}register/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(async res => {\n    const data = await res.json();\n\n    if (res.ok) {\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: data\n      });\n      console.log('what the fuck');\n    }\n  });\n};\nexport const logout = () => (dispatch, getState) => {\n  const token = localStorage.getItem('token');\n  fetch(`${link}logout/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `token ${token}`\n    }\n  }).then(res => {\n    if (res.ok) {\n      dispatch({\n        type: LOGOUT_SUCCESS\n      });\n    }\n  });\n};\nexport const addContact = () => (dispatch, getState) => {\n  dispatch({\n    type: GET_USER_LOADING\n  });\n  const token = getState().auth.token;\n\n  if (!token) {\n    return dispatch({\n      type: GET_USER_FAILURE\n    });\n  }\n\n  fetch(`${link}user/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Token ${token}`\n    }\n  }).then(async res => {\n    const data = await res.json();\n\n    if (res.ok) {\n      dispatch({\n        type: GET_USER_LOADED,\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: GET_USER_FAILURE,\n        payload: data\n      });\n    }\n  }).then(data => {\n    console.log(data);\n  });\n};","map":{"version":3,"sources":["C:/Users/zcczz/Desktop/contact book/contactbook/frontend/src/redux/actions.js"],"names":["LOGIN_FAILURE","LOGIN_SUCCESS","LOGIN_FETCH","REGISTER_FAILURE","REGISTER_SUCCESS","REGISTER_FETCH","GET_USER_LOADING","GET_USER_LOADED","GET_USER_FAILURE","LOGOUT_SUCCESS","LOGOUT_FAILURE","ADD_CONTACT_FAILURE","ADD_CONTACT_SUCCESS","ADD_CONTACT_LOADING","GET_CONTACTS_FAILURE","GET_CONTACTS_SUCCESS","GET","link","getUser","dispatch","getState","type","token","auth","fetch","method","headers","then","res","data","json","ok","payload","console","log","loginUser","cb","body","JSON","stringify","localStorage","setItem","catch","register","logout","getItem","addContact"],"mappings":"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","sourcesContent":["import {\r\n    LOGIN_FAILURE,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FETCH,\r\n    REGISTER_FAILURE,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FETCH,\r\n    GET_USER_LOADING,\r\n    GET_USER_LOADED,\r\n    GET_USER_FAILURE,\r\n    LOGOUT_SUCCESS,\r\n    LOGOUT_FAILURE,\r\n    ADD_CONTACT_FAILURE,\r\n    ADD_CONTACT_SUCCESS,\r\n    ADD_CONTACT_LOADING,\r\n    GET_CONTACTS_FAILURE,\r\n    GET_CONTACTS_SUCCESS,\r\n    GET\r\n} from '../redux/action-types';\r\n\r\n\r\nconst link = 'http://127.0.0.1:8000/api/accounts/';\r\n\r\nexport const getUser = () => (dispatch, getState) => {\r\n    dispatch({ type: GET_USER_LOADING })\r\n\r\n    const token = getState().auth.token\r\n\r\n    if (!token) {\r\n        return dispatch({ type: GET_USER_FAILURE })\r\n    }\r\n    fetch(`${link}user/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Token ${token}`,\r\n        }\r\n    })\r\n        .then(async res => {\r\n            const data = await res.json();\r\n            if (res.ok) {\r\n                dispatch({ type: GET_USER_LOADED, payload: data });\r\n            }\r\n            else {\r\n                dispatch({\r\n                    type: GET_USER_FAILURE, payload: data\r\n                });\r\n            }\r\n        })\r\n        .then(data => { console.log(data) })\r\n}\r\n\r\nexport const loginUser = (data, cb) => dispatch => {\r\n    dispatch({ type: LOGIN_FETCH })\r\n    fetch(`${link}login/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(async res => {\r\n            const data = await res.json();\r\n            if (res.ok) {\r\n                localStorage.setItem('token', data.token)\r\n                dispatch({ type: LOGIN_SUCCESS, payload: data })\r\n\r\n            } else {\r\n                console.log(data);\r\n                dispatch({ type: LOGIN_FAILURE, payload: data })\r\n            }\r\n        })\r\n        .catch()\r\n}\r\n\r\n\r\nexport const register = data => dispatch => {\r\n    dispatch({\r\n        type: REGISTER_FETCH\r\n    })\r\n    fetch(`${link}register/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(async res => {\r\n            const data = await res.json();\r\n            if (res.ok) {\r\n                dispatch({\r\n                    type: REGISTER_SUCCESS,\r\n                    payload: data\r\n                });\r\n                console.log('what the fuck')\r\n            }\r\n        })\r\n}\r\n\r\nexport const logout = () => (dispatch, getState) => {\r\n    const token = localStorage.getItem('token')\r\n    fetch(`${link}logout/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `token ${token}`\r\n        },\r\n    })\r\n        .then(res => {\r\n            if (res.ok) {\r\n                dispatch({ type: LOGOUT_SUCCESS })\r\n            }\r\n        })\r\n}\r\n\r\n\r\nexport const addContact = () => (dispatch, getState) => {\r\n    dispatch({ type: GET_USER_LOADING })\r\n\r\n    const token = getState().auth.token\r\n\r\n    if (!token) {\r\n        return dispatch({ type: GET_USER_FAILURE })\r\n    }\r\n    fetch(`${link}user/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Token ${token}`,\r\n        }\r\n    })\r\n        .then(async res => {\r\n            const data = await res.json();\r\n            if (res.ok) {\r\n                dispatch({ type: GET_USER_LOADED, payload: data });\r\n            }\r\n            else {\r\n                dispatch({\r\n                    type: GET_USER_FAILURE, payload: data\r\n                });\r\n            }\r\n        })\r\n        .then(data => { console.log(data) })\r\n}"]},"metadata":{},"sourceType":"module"}